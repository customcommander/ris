{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NPM Yarn Browser npm i @customcommander/ris yarn add @customcommander/ris <!-- The library is available under the RIS namespace --> < script src = \"./node_modules/@customcommander/ris/dist/browser.min.js\" ></ script > Introduction @customcommander/ris is a JavaScript library available on NPM that lets you read and write bibliographic records in the RIS format . const { read , write } = require ( '@customcommander/ris' ); read ( ` TY - JOUR TI - Foo ER - TY - BOOK TI - Bar ER - TY - CHAP TI - Baz ER - ` ); //=> [ {TY: ['JOUR'], TI: ['Foo']} //=> , {TY: ['BOOK'], TI: ['Bar']} //=> , {TY: ['CHAP'], TI: ['Baz']}] write ([ { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Hello World!\" ]} , { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Apollo 11\" ] , \"DA\" : [{ \"year\" : \"1969\" , \"month\" : \"07\" , \"day\" : \"20\" , \"info\" : \"Moon\" }]}]); // => TY - JOUR // => TI - Hello World! // => ER - // => // => TY - JOUR // => TI - Apollo 11 // => DA - 1969/07/20/Moon // => ER - // =>","title":"About"},{"location":"#introduction","text":"@customcommander/ris is a JavaScript library available on NPM that lets you read and write bibliographic records in the RIS format . const { read , write } = require ( '@customcommander/ris' ); read ( ` TY - JOUR TI - Foo ER - TY - BOOK TI - Bar ER - TY - CHAP TI - Baz ER - ` ); //=> [ {TY: ['JOUR'], TI: ['Foo']} //=> , {TY: ['BOOK'], TI: ['Bar']} //=> , {TY: ['CHAP'], TI: ['Baz']}] write ([ { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Hello World!\" ]} , { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Apollo 11\" ] , \"DA\" : [{ \"year\" : \"1969\" , \"month\" : \"07\" , \"day\" : \"20\" , \"info\" : \"Moon\" }]}]); // => TY - JOUR // => TI - Hello World! // => ER - // => // => TY - JOUR // => TI - Apollo 11 // => DA - 1969/07/20/Moon // => ER - // =>","title":"Introduction"},{"location":"convert/","text":"The library","title":"Convert"},{"location":"intro/","text":"Reading RIS Attention Please make sure that the content is correctly formatted as per the RIS specification. The read function takes a string and returns an array of objects (one per reference). Each key in an object is named after the corresponding RIS tag and holds the values for each entry for that tag in a single reference. (Some tags can appear multiple times.) const { read } = require ( '@customcommander/ris' ); read ( ` TY - JOUR TI - Foo KW - keyword1 KW - keyword2 KW - keyword3 ER - TY - BOOK TI - Bar ER - TY - CHAP TI - Baz ER - ` ); //=> [ { \"TY\": [ \"JOUR\" ] //=> , \"TI\": [ \"Foo\" ] //=> , \"KW\": [ \"keyword1\", \"keyword2\", \"keyword3\" ] } //=> //=> , { \"TY\": [ \"BOOK\" ] //=> , \"TI\": [ \"Bar\" ] } //=> //=> , { \"TY\": [ \"CHAP\" ] //=> , \"TI\": [ \"Baz\" ] } ] The function returns null if it cannot parse the content. If you think this is a bug please raise an issue . Additional Processing Some tags like DA or RP have special formatting rules: Tag Content (example) After processing DA 2020/06/25/ {\"year\": \"2020\", \"month\": \"06\", \"day\": \"25\", \"info\": \"\"} DA /// {\"year\": \"\" , \"month\": \"\" , \"day\": \"\" , \"info\": \"\"} DA /06// {\"year\": \"\" , \"month\": \"06\", \"day\": \"\" , \"info\": \"\"} DA 2020//25/Conf {\"year\": \"2020\", \"month\": \"\" , \"day\": \"25\", \"info\": \"Conf\"} RP IN FILE {\"status\": \"IN FILE\"} RP NOT IN FILE {\"status\": \"NOT IN FILE\"} RP ON REQUEST (06/26/2020) {\"status\": \"ON REQUEST\",\"date\": {\"year\": \"2020\", \"month\": \"06\", \"day\": \"26\"}} Info The parser won't enforce these rules. Any content that doesn't comply is returned as is. Writing RIS The library exposes a write function that takes an input of the same type than the output of the read function. const { write } = require ( '@customcommander/ris' ); write ([ { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Hello World!\" ]} , { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Apollo 11\" ] , \"DA\" : [{ \"year\" : \"1969\" , \"month\" : \"07\" , \"day\" : \"20\" , \"info\" : \"Moon\" }]}]); // => TY - JOUR // => TI - Hello World! // => ER - // => // => TY - JOUR // => TI - Apollo 11 // => DA - 1969/07/20/Moon // => ER - // => If the input isn't an array an empty string is returned. Each element is validated first and skipped if not valid so it is possible to get an empty string even with a non-empty array. Each element must be a key/value pairs object: Each key must be a two-letter capital word. The second letter may be a number. Each value must be an array of at least one non-empty string. Some keys have additional rules. TY This is the only required key. Must be set to an array of exactly one non-empty string e.g., { \"TY\" : [ \"JOUR\" ] } DA Must be set to an array of exactly one element which can be either a non-empty string or an object e.g., { \"TY\" : [ \"JOUR\" ] , \"DA\" : [ \"1969/07/20/Moon\" ] } // ^^^^ ^^ ^^ ^^^^ // A B C D // A: year // B: month // C: day // D: info // or { \"TY\" : [ \"JOUR\" ] , \"DA\" : [ { \"year\" : \"<non-empty string>\" /* Required. */ , \"month\" : \"<non-empty string>\" /* Optional. */ , \"day\" : \"<non-empty string>\" /* Optional. */ , \"info\" : \"<non-empty string>\" /* Optional. */ }]} AU, A1, A2, A3, A4 & TA In addition to non-empty strings, arrays for these keys can also have objects e.g., { \"TY\" : [ \"JOUR\" ] , \"AU\" : [ \"Doe, John\" , { \"last_name\" : \"<non-empty string>\" /* Required. */ , \"first_name\" : \"<non-empty string>\" /* Optional. */ , \"initials\" : \"<non-empty string>\" /* Optional. */ , \"suffix\" : \"<non-empty string>\" /* Optional. */ }]} RP Must be set to an array of exactly one element which can be either a non-empty string or an object e.g., { \"TY\" : [ \"JOUR\" ] , \"RP\" : [ \"<non-empy string>\" ] } // or { \"TY\" : [ \"JOUR\" ] , \"RP\" : [{ \"status\" : \"<non-empty string>\" /* Required. */ , \"year\" : \"<non-empty string>\" /* Optional. */ , \"month\" : \"<non-empty string>\" /* Optional. */ , \"day\" : \"<non-empty string>\" /* Optional. */ }] } ER This is the only reserved tag. You shouldn't use it but if you do any value will be ignored .","title":"Read & Write"},{"location":"intro/#reading-ris","text":"Attention Please make sure that the content is correctly formatted as per the RIS specification. The read function takes a string and returns an array of objects (one per reference). Each key in an object is named after the corresponding RIS tag and holds the values for each entry for that tag in a single reference. (Some tags can appear multiple times.) const { read } = require ( '@customcommander/ris' ); read ( ` TY - JOUR TI - Foo KW - keyword1 KW - keyword2 KW - keyword3 ER - TY - BOOK TI - Bar ER - TY - CHAP TI - Baz ER - ` ); //=> [ { \"TY\": [ \"JOUR\" ] //=> , \"TI\": [ \"Foo\" ] //=> , \"KW\": [ \"keyword1\", \"keyword2\", \"keyword3\" ] } //=> //=> , { \"TY\": [ \"BOOK\" ] //=> , \"TI\": [ \"Bar\" ] } //=> //=> , { \"TY\": [ \"CHAP\" ] //=> , \"TI\": [ \"Baz\" ] } ] The function returns null if it cannot parse the content. If you think this is a bug please raise an issue .","title":"Reading RIS"},{"location":"intro/#additional-processing","text":"Some tags like DA or RP have special formatting rules: Tag Content (example) After processing DA 2020/06/25/ {\"year\": \"2020\", \"month\": \"06\", \"day\": \"25\", \"info\": \"\"} DA /// {\"year\": \"\" , \"month\": \"\" , \"day\": \"\" , \"info\": \"\"} DA /06// {\"year\": \"\" , \"month\": \"06\", \"day\": \"\" , \"info\": \"\"} DA 2020//25/Conf {\"year\": \"2020\", \"month\": \"\" , \"day\": \"25\", \"info\": \"Conf\"} RP IN FILE {\"status\": \"IN FILE\"} RP NOT IN FILE {\"status\": \"NOT IN FILE\"} RP ON REQUEST (06/26/2020) {\"status\": \"ON REQUEST\",\"date\": {\"year\": \"2020\", \"month\": \"06\", \"day\": \"26\"}} Info The parser won't enforce these rules. Any content that doesn't comply is returned as is.","title":"Additional Processing"},{"location":"intro/#writing-ris","text":"The library exposes a write function that takes an input of the same type than the output of the read function. const { write } = require ( '@customcommander/ris' ); write ([ { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Hello World!\" ]} , { \"TY\" : [ \"JOUR\" ] , \"TI\" : [ \"Apollo 11\" ] , \"DA\" : [{ \"year\" : \"1969\" , \"month\" : \"07\" , \"day\" : \"20\" , \"info\" : \"Moon\" }]}]); // => TY - JOUR // => TI - Hello World! // => ER - // => // => TY - JOUR // => TI - Apollo 11 // => DA - 1969/07/20/Moon // => ER - // => If the input isn't an array an empty string is returned. Each element is validated first and skipped if not valid so it is possible to get an empty string even with a non-empty array. Each element must be a key/value pairs object: Each key must be a two-letter capital word. The second letter may be a number. Each value must be an array of at least one non-empty string. Some keys have additional rules.","title":"Writing RIS"},{"location":"intro/#ty","text":"This is the only required key. Must be set to an array of exactly one non-empty string e.g., { \"TY\" : [ \"JOUR\" ] }","title":"TY"},{"location":"intro/#da","text":"Must be set to an array of exactly one element which can be either a non-empty string or an object e.g., { \"TY\" : [ \"JOUR\" ] , \"DA\" : [ \"1969/07/20/Moon\" ] } // ^^^^ ^^ ^^ ^^^^ // A B C D // A: year // B: month // C: day // D: info // or { \"TY\" : [ \"JOUR\" ] , \"DA\" : [ { \"year\" : \"<non-empty string>\" /* Required. */ , \"month\" : \"<non-empty string>\" /* Optional. */ , \"day\" : \"<non-empty string>\" /* Optional. */ , \"info\" : \"<non-empty string>\" /* Optional. */ }]}","title":"DA"},{"location":"intro/#au-a1-a2-a3-a4-ta","text":"In addition to non-empty strings, arrays for these keys can also have objects e.g., { \"TY\" : [ \"JOUR\" ] , \"AU\" : [ \"Doe, John\" , { \"last_name\" : \"<non-empty string>\" /* Required. */ , \"first_name\" : \"<non-empty string>\" /* Optional. */ , \"initials\" : \"<non-empty string>\" /* Optional. */ , \"suffix\" : \"<non-empty string>\" /* Optional. */ }]}","title":"AU, A1, A2, A3, A4 &amp; TA"},{"location":"intro/#rp","text":"Must be set to an array of exactly one element which can be either a non-empty string or an object e.g., { \"TY\" : [ \"JOUR\" ] , \"RP\" : [ \"<non-empy string>\" ] } // or { \"TY\" : [ \"JOUR\" ] , \"RP\" : [{ \"status\" : \"<non-empty string>\" /* Required. */ , \"year\" : \"<non-empty string>\" /* Optional. */ , \"month\" : \"<non-empty string>\" /* Optional. */ , \"day\" : \"<non-empty string>\" /* Optional. */ }] }","title":"RP"},{"location":"intro/#er","text":"This is the only reserved tag. You shouldn't use it but if you do any value will be ignored .","title":"ER"},{"location":"mendeley/","text":"RIS to Mendeley Bibliographic records in RIS format can be converted to Mendeley references: const { toMendeley } = require ( '@customcommander/ris' ); toMendeley ( ` TY - JOUR TI - Mission to the Moon AU - Armstrong, Neil DA - 1969/07/20 ER - ` ); //=> [{ type: 'journal' //=> , authors: [{last_name: 'Armstrong', first_name: 'Neil'}] //=> , accessed: '1969-07-20' //=> , title: 'Mission to the Moon' }] Conversion Table The following table shows which RIS fields are supported by the Mendeley Reference Manager . RIS Type RIS Entry Mendeley any A1 authors any A2 editors any A3 authors any A4 authors any AB abstract any AN identifiers.pmid any AU authors PAT C6 patent_legal_status any CY city any DA accessed any DO identifiers.doi any ET edition any IS issue any KW keywords any L1 websites any L4 websites any LA language any LB tags PAT M1 patent_application_number any N1 notes any PB publisher any PY year any RN notes any SE chapter any SN identifiers.isbn JFULL SN identifiers.issn JOUR SN identifiers.issn any SP pages any ST short_title any T2 source any T3 series any TA authors any TI title BILL TY type (as bill ) BOOK TY type (as book ) CASE TY type (as case ) CHAP TY type (as book_section ) COMP TY type (as computer_program ) CONF TY type (as conference_proceedings ) ENCYC TY type (as encyclopedia_article ) GEN TY type (as generic ) HEAR TY type (as hearing ) ICOMM TY type (as web_page ) JFULL TY type (as journal ) JOUR TY type (as journal ) MGZN TY type (as magazine_article ) MPCT TY type (as film ) NEWS TY type (as newspaper_article ) PAT TY type (as patent ) RPRT TY type (as report ) STAT TY type (as statute ) THES TY type (as thesis ) UNPB TY type (as working_paper ) others TY type (as generic ) any UR websites any VL volume RPRT VL series_number Errors Each Mendeley reference is validated before it is returned so toMendeley can return an empty array. If the RIS content cannot be parsed toMendeley returns null . Mendeley to RIS It is also possible to generate RIS records from Mendeley references: (using the above table) fromMendeley ([{ type : 'journal' , title : 'Moon 69' , year : 1969 , authors : [{ last_name : 'Armstrong' , first_name : 'Neil' }] , identifiers : { doi : 'doi/123' }}]); //=> TY - JOUR //=> TI - Moon 69 //=> PY - 1969 //=> AU - Armstrong, Neil //=> DO - doi/123 //=> ER - //=> Errors The fromMendeley returns null if the input is not an array or if all elements are not valid Mendeley references. Otherwise invalid elements are ignored.","title":"Mendeley"},{"location":"mendeley/#ris-to-mendeley","text":"Bibliographic records in RIS format can be converted to Mendeley references: const { toMendeley } = require ( '@customcommander/ris' ); toMendeley ( ` TY - JOUR TI - Mission to the Moon AU - Armstrong, Neil DA - 1969/07/20 ER - ` ); //=> [{ type: 'journal' //=> , authors: [{last_name: 'Armstrong', first_name: 'Neil'}] //=> , accessed: '1969-07-20' //=> , title: 'Mission to the Moon' }]","title":"RIS to Mendeley"},{"location":"mendeley/#conversion-table","text":"The following table shows which RIS fields are supported by the Mendeley Reference Manager . RIS Type RIS Entry Mendeley any A1 authors any A2 editors any A3 authors any A4 authors any AB abstract any AN identifiers.pmid any AU authors PAT C6 patent_legal_status any CY city any DA accessed any DO identifiers.doi any ET edition any IS issue any KW keywords any L1 websites any L4 websites any LA language any LB tags PAT M1 patent_application_number any N1 notes any PB publisher any PY year any RN notes any SE chapter any SN identifiers.isbn JFULL SN identifiers.issn JOUR SN identifiers.issn any SP pages any ST short_title any T2 source any T3 series any TA authors any TI title BILL TY type (as bill ) BOOK TY type (as book ) CASE TY type (as case ) CHAP TY type (as book_section ) COMP TY type (as computer_program ) CONF TY type (as conference_proceedings ) ENCYC TY type (as encyclopedia_article ) GEN TY type (as generic ) HEAR TY type (as hearing ) ICOMM TY type (as web_page ) JFULL TY type (as journal ) JOUR TY type (as journal ) MGZN TY type (as magazine_article ) MPCT TY type (as film ) NEWS TY type (as newspaper_article ) PAT TY type (as patent ) RPRT TY type (as report ) STAT TY type (as statute ) THES TY type (as thesis ) UNPB TY type (as working_paper ) others TY type (as generic ) any UR websites any VL volume RPRT VL series_number","title":"Conversion Table"},{"location":"mendeley/#errors","text":"Each Mendeley reference is validated before it is returned so toMendeley can return an empty array. If the RIS content cannot be parsed toMendeley returns null .","title":"Errors"},{"location":"mendeley/#mendeley-to-ris","text":"It is also possible to generate RIS records from Mendeley references: (using the above table) fromMendeley ([{ type : 'journal' , title : 'Moon 69' , year : 1969 , authors : [{ last_name : 'Armstrong' , first_name : 'Neil' }] , identifiers : { doi : 'doi/123' }}]); //=> TY - JOUR //=> TI - Moon 69 //=> PY - 1969 //=> AU - Armstrong, Neil //=> DO - doi/123 //=> ER - //=>","title":"Mendeley to RIS"},{"location":"mendeley/#errors_1","text":"The fromMendeley returns null if the input is not an array or if all elements are not valid Mendeley references. Otherwise invalid elements are ignored.","title":"Errors"}]}